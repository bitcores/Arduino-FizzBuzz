#ifndef __Display_h__
#define __Display_h__

#include <Arduino.h>
#include <avr/pgmspace.h>

#define Number_of_Displays 2
#define CHIP_MAX 4*Number_of_Displays //Four HT1632Cs on one board
#define X_MAX 32*Number_of_Displays
#define Y_MAX 16

#define CLK_DELAY


// possible values for a pixel;
//RANDOMCOLOR for each line a different color
//MULTICOLOR for each point a different random color
#define BLACK  0
#define GREEN  1
#define RED    2
#define ORANGE 3
#define RANDOMCOLOR 4 // only for scrolling functions
#define MULTICOLOR 5

// insert here the number of columns of your font files 
// the compiler will comment how large the number of columns
// should be
#define NCOLUMNS 8

#define LONGDELAY 1000  // This delay BETWEEN demos

#define plot(x,y,v)  ht1632_plot(x,y,v)
#define cls          ht1632_clear

//**************************************************************************************************
//Function Name: calcBit
//Function Feature: calculate the bitval of y
//Input Argument: y: Y coordinate
//Output Argument: bitval
//**************************************************************************************************
#define calcBit(y) (8>>(y&3))

/*
 * Set these constants to the values of the pins connected to the SureElectronics Module
 */
static const byte ht1632_data = 28;  // Data pin (pin 7 of display connector)
static const byte ht1632_wrclk = 26; // Write clock pin (pin 5 of display connector)
static const byte ht1632_cs = 22;    // Chip Select (pin 1 of display connnector)
static const byte ht1632_clk = 24; // clock pin (pin 2 of display connector)

/*
 * functions
 */
void OutputCLK_Pulse(void); //Output a clock pulse
void OutputA_74164(unsigned char x); //Input a digital level to 74164
void ChipSelect(int select);
void ht1632_writebits (byte bits, byte firstbit);
static void ht1632_sendcmd (byte chipNo, byte command);
static void ht1632_senddata (byte chipNo, byte address, byte data);
void ht1632_setup();
byte xyToIndex(byte x, byte y);
int get_pixel(byte x, byte y);
void ht1632_plot (int x, int y, byte color);
void ht1632_clear();
void ht1632_putchar(int x, int y, char c, byte color=GREEN);
void ht1632_putcharsizecolor(int x, int y,unsigned char c,  char size, byte color, byte secondcolor, unsigned char fontname[][NCOLUMNS],  int columncountfont, char rowcountfont, char oddeven);
void ht1632_putcharsize1D(int x, int y,unsigned char c,  char size, byte color,  byte secondcolor,unsigned char * fontname,  char columncountfont, char rowcountfont, char oddeven);
void ht1632_putbigbitmap(int x, int y, byte color, byte secondcolor,  unsigned char * bitmapname, int columncountbitmap, byte rowcountbitmap, char oddeven);
void scrollbitmapxcolor(int y, byte color, byte secondcolor,unsigned char * bitmapname,int columncountbitmap, byte rowcountbitmap,char oddeven,int delaytime);
void scrollbitmapycolor(int x,byte color, byte secondcolor,unsigned char * bitmapname ,int columncountbitmap, byte rowcountbitmap,char oddeven, int delaytime);
void scrolltextxcolor(int y,char Str1[ ], byte color, int delaytime);  
void scrolltextsizexcolor(int y,char Str1[ ], char size, byte color, byte secondcolor,  unsigned char fontname[][NCOLUMNS], int columncountfont, char rowcountfont, char oddeven, int delaytime);
 void scrolltextsizey(int x,char Str1[ ], char size, byte color, byte secondcolor, unsigned char fontname[][NCOLUMNS], int columncountfont, char rowcountfont, char oddeven, int delaytime);
void scrolltextsize1Dxcolor(int y, char Str1[ ], char size,  byte color, byte secondcolor, unsigned char * fontname,   int columncountfont, char rowcountfont, char oddeven, int delaytime);

/***********************************************************************
 * Demo Bitmap data 
 * replace it with your own data
 *
***********************************************************************
 * How to make bitmaps for the matrix
 * 1. Gimp
*  Either import or draw your bitmap.
*  For using the bitmaps with the matrix, you have to rotate it clockwise 90°.
*  Save it as X-Bitmap, don't check the X10 option.
*  Then open the xbm file, add PROGMEM before or after the bitmap name(=bitmap name+"_bits[]"), call the bitmap by with its name.
*
*  2. The Dot Factory (http://www.pavius.net/downloads/tools/53-the-dot-factory)
*  This a good windows software for using fonts but bitmaps, too.
*  For using bitmaps/fonts select the tool icon, check "Flip X", "90°" at Flip/Rotate. "Width" at Fixed, "MsbFirst" if it wasn't.
*  You can import any bitmap.
*  Ppush Generate, replace the "const uint_8" " with "unsigned char PROGMEM" and call the bitmap by with its name.

 ***********************************************************************/

const static unsigned char PROGMEM lady_bits[] = {  
0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, //                                              #                          
	0x00, 0x01, 0xFF, 0xFF, 0x00, 0x3C, 0x00, 0x00, 0x00, //                #################          ####                          
	0x00, 0x07, 0xFF, 0xFF, 0x80, 0xFC, 0x00, 0x00, 0x00, //              ####################       ######                          
	0x00, 0x07, 0xFF, 0xFF, 0x83, 0xFC, 0x00, 0x00, 0x00, //              ####################     ########                          
	0x00, 0x0F, 0xFF, 0xFF, 0x1F, 0xFC, 0x00, 0x00, 0x00, //             ####################   ###########                          
	0x00, 0x0F, 0xC0, 0x00, 0x7F, 0xFC, 0x00, 0x00, 0x00, //             ######               #############                          
	0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, //             #######################################################     
	0x1F, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, //    #####    ########################################################    
	0x7F, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, //  #########  ########################################################    
	0x7F, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, //  #########  ########################################################    
	0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, // ########### #######################################################     
	0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, // ########### ##################################                          
	0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, // ########### #######################################################     
	0x7F, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, //  #########  ########################################################    
	0x7F, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, //  #########  ########################################################    
	0x1F, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, //    #####    ########################################################    
	0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, //             #######################################################     
	0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, //             ##################################                          
	0x00, 0x0F, 0xC0, 0x00, 0x7F, 0xFC, 0x00, 0x00, 0x00, //             ######               #############                          
	0x00, 0x0F, 0xFF, 0xFF, 0x07, 0xFC, 0x00, 0x00, 0x00, //             ####################     #########                          
	0x00, 0x07, 0xFF, 0xFF, 0x80, 0x7C, 0x00, 0x00, 0x00, //              ####################        #####                          
	0x00, 0x07, 0xFF, 0xFF, 0x80, 0x0C, 0x00, 0x00, 0x00, //              ####################           ##                          
	0x00, 0x01, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, //                #################                                       
};





const static unsigned char a0_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

const static unsigned char PROGMEM a1_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x20, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00 };

const static unsigned char PROGMEM a2_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x08, 0x00,
  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x08, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

const static unsigned char PROGMEM a3_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00,
  0x00, 0x40, 0x01, 0x00, 0x00, 0x48, 0x01, 0x00, 0x00, 0x80, 0x08, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

const static unsigned char PROGMEM a4_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x24, 0x22, 0x00, 0x00, 0x20, 0x27, 0x00,
  0x00, 0x90, 0x03, 0x00, 0x00, 0xa4, 0x02, 0x00, 0x00, 0xc4, 0x11, 0x00,
  0x00, 0x40, 0x21, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
  0x00, 0x00, 0x08, 0x00, 0x00, 0x30, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };


const static unsigned char PROGMEM a5_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x66, 0x41, 0x00,
  0x00, 0x41, 0x2b, 0x00, 0x00, 0x60, 0x21, 0x00, 0x00, 0x61, 0x16, 0x00,
  0x80, 0x9a, 0x74, 0x00, 0x80, 0x09, 0xc0, 0x01, 0x00, 0x0d, 0xc2, 0x01,
  0x00, 0x11, 0x69, 0x00, 0x00, 0x0d, 0xdd, 0x00, 0x00, 0x0a, 0x42, 0x00,
  0x00, 0xd0, 0x20, 0x00, 0x00, 0xd0, 0x41, 0x00, 0x00, 0x14, 0x20, 0x00,
  0x00, 0x08, 0x04, 0x00, 0x00, 0x40, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

const static unsigned char PROGMEM a6_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0f, 0x00,
  0x00, 0xa0, 0x11, 0x00, 0x00, 0xaa, 0x64, 0x00, 0x00, 0x00, 0x29, 0x00,
  0x00, 0x38, 0x38, 0x00, 0x00, 0x42, 0xa9, 0x00, 0x00, 0x26, 0x72, 0x01,
  0x00, 0x11, 0x4c, 0x00, 0x00, 0x25, 0x90, 0x02, 0x00, 0x11, 0x40, 0x00,
  0x40, 0x51, 0xe8, 0x00, 0x00, 0x1b, 0xe1, 0x03, 0x80, 0xb1, 0x62, 0x00,
  0x00, 0x68, 0x0e, 0x01, 0x00, 0xf3, 0x10, 0x00, 0x00, 0xd0, 0x9f, 0x00,
  0x00, 0x24, 0x5c, 0x00, 0x00, 0x80, 0x22, 0x00, 0x00, 0x20, 0x08, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };


const static unsigned char PROGMEM a7_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0xa0, 0x1c, 0x00,
  0x00, 0x6c, 0x31, 0x00, 0x00, 0x30, 0x15, 0x00, 0x00, 0x06, 0x61, 0x00,
  0x00, 0x24, 0x8a, 0x00, 0x80, 0x75, 0xd9, 0x00, 0x80, 0x34, 0x88, 0x01,
  0x80, 0x1c, 0x04, 0x01, 0x40, 0x45, 0x20, 0x00, 0x00, 0x00, 0x60, 0x00,
  0xc0, 0x85, 0xc0, 0x02, 0xc0, 0x54, 0xd0, 0x02, 0x00, 0x0a, 0x00, 0x01,
  0x80, 0x04, 0xc8, 0x00, 0x00, 0x15, 0x10, 0x01, 0x00, 0x80, 0x15, 0x00,
  0x00, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0xa4, 0x3c, 0x00,
  0x00, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

const static unsigned char PROGMEM preisinfomation3_bits[] = {
  0x00,0x00, 0x1e, 0x00, 0x2d, 0x00, 0x33, 0x00, 0x33, 0x00, 0x2d, 0x00, 0x1e, 0x00,
  0xf8, 0x27, 0xf8, 0x2b, 0x88, 0x2d, 0xf0, 0x2e, 0x60, 0x2f, 0x00, 0x2f,
  0x00, 0x2f, 0x00, 0x0f, 0x9e, 0x07, 0x6d, 0x00, 0x33, 0x18, 0x33, 0x3c,
  0x2d, 0x18, 0x1e,  0x00 };   

const static unsigned char PROGMEM Jahr0_bits[] = {
  0x1F, 0x80, //    ######       
  0x7F, 0xE0, //  ##########     
  0xC0, 0x30, // ##        ##    
  0x80, 0x10, // #          #    
  0x80, 0x10, // #          #    
  0xC0, 0x30, // ##        ##    
  0x7F, 0xE0, //  ##########     
  0x1F, 0x80};    
const static unsigned char PROGMEM Jahr1_bits[] = {
  // @16 '1' (8 pixels wide)
  0x00, 0x00, //                 
  0x40, 0x10, //  #         #    
  0x40, 0x10, //  #         #    
  0xFF, 0xF0, // ############    
  0xFF, 0xF0, // ############    
  0x00, 0x10, //            #    
  0x00, 0x10, //            #    
  0x00, 0x00};    
const static unsigned char PROGMEM Jahr2_bits[] = {                
  // @32 '2' (8 pixels wide)
  0x20, 0x10, //   #        #    
  0x40, 0x30, //  #        ##    
  0x80, 0x70, // #        ###    
  0x81, 0xB0, // #      ## ##    
  0xC3, 0x30, // ##    ##  ##    
  0xFC, 0x30, // ######    ##    
  0x78, 0x30, //  ####     ##    
  0x00, 0x60 //          ##   
};  

#endif

